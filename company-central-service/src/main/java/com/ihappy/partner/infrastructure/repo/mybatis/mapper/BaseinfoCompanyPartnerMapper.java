package com.ihappy.partner.infrastructure.repo.mybatis.mapper;

import com.ihappy.partner.domain.bo.partner.PartnerBO;
import com.ihappy.partner.domain.bo.partner.QueryPartnerBO;
import com.ihappy.partner.domain.dbdo.BaseinfoCompanyPartner;
import com.ihappy.partner.domain.dto.request.partner.ProviderInfoInsideQueryReqDTO;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import java.util.Map;

public interface BaseinfoCompanyPartnerMapper {
    /**
     * 查询Partner对账列表
     * @param map
     * @return
     */
    List<BaseinfoCompanyPartner> selectPartnerCheckPage(Map<String,Object> map);

    /**
     * 查询Partner对账计数
     * @param map
     * @return
     */
    Integer selectPartnerCheckPageCount(Map<String,Object> map);
    /**
     * 查询Partner统计数据
     * @param partner
     * @return
     */
    PartnerBO selectPartnerStatistics(BaseinfoCompanyPartner partner);
    /**
     * 根据条件查询
     * 过滤已删除
     * @param record
     * @return
     */
    List<BaseinfoCompanyPartner> selectSelective(BaseinfoCompanyPartner record);

    /**
     * 根据条件查询
     * @param record
     * @return
     */
    List<BaseinfoCompanyPartner> selectByCondition(BaseinfoCompanyPartner record);

    /**
     * 根据条件查询分页
     * @param record
     * @return
     */
    List<BaseinfoCompanyPartner> selectPartnerPageByCondition(BaseinfoCompanyPartner record);

    /**
     * 根据条件查询分页-总记录数
     * @param record
     * @return
     */
    Integer selectPartnerPageByConditionCount(BaseinfoCompanyPartner record);
    /**
     * 根据公司id分页查询会员列表
     * @param queryPartnerBO
     * @return
     */
    List<BaseinfoCompanyPartner> selectPartnerPageByCompId(QueryPartnerBO queryPartnerBO);

    /**
     * 根据公司id分页查询会员列表数量
     * @param queryPartnerBO
     * @return
     */
    Integer selectPartnerPageByCompIdCount(QueryPartnerBO queryPartnerBO);

    /**
     * 根据id，compId查询
     * @param baseinfoCompanyPartner
     * @return
     */
    BaseinfoCompanyPartner selectPartner(BaseinfoCompanyPartner baseinfoCompanyPartner);

    /**
     * 更新往来时间
     * @param baseinfoCompanyPartner
     * @return
     */
    Integer updateLastContactTime(BaseinfoCompanyPartner baseinfoCompanyPartner);
    /**
     * 根据欠款订单修改欠款
     * @param baseinfoCompanyPartner
     * @return
     */
    Integer updatePartnerArrearsByOrder(BaseinfoCompanyPartner baseinfoCompanyPartner);
    /**
     * 查询供应商列表
     * @param baseinfoCompanyPartner
     * @return
     */
    List<BaseinfoCompanyPartner> selectListByProviderInfoQueryRespDTO(BaseinfoCompanyPartner baseinfoCompanyPartner);

    /**
     * 查询客户列表
     * @param baseinfoCompanyPartner
     * @return
     */
    List<BaseinfoCompanyPartner> selectListByCustomerInfoQueryRespDTO(BaseinfoCompanyPartner baseinfoCompanyPartner);

    /**
     * 修改伙伴信息
     * @param baseinfoCompanyPartner
     * @return
     */
    Integer updatePartnerInfo(BaseinfoCompanyPartner baseinfoCompanyPartner);

    /**
     * 删除Partner
     * @param baseinfoCompanyPartner
     * @return
     */
    Integer delCompanyPartner(BaseinfoCompanyPartner baseinfoCompanyPartner);

    /**
     * 禁用会员
     * @param  baseinfoCompanyPartner
     * @return
     */
    Integer forbidRetailCustomer(BaseinfoCompanyPartner baseinfoCompanyPartner);

    /**
     * 启用会员
     *
     * @param baseinfoCompanyPartner
     * @return
     */
    Integer unforbidRetailCustomer(BaseinfoCompanyPartner baseinfoCompanyPartner);

    /**
     * 查询收藏列表
     * @param obj
     * @param limit
     * @return
     */
    List<BaseinfoCompanyPartner> selectFavorByLimit(@Param("obj") BaseinfoCompanyPartner obj,@Param("limit") Integer limit);

    /**
     * 查询最近往来列表
     * @param obj
     * @param limit
     * @return
     */
    List<BaseinfoCompanyPartner> selectLastContactByLimit(@Param("obj") BaseinfoCompanyPartner obj,@Param("limit") Integer limit);

    /**
     * 根据会员等级id查询伙伴列表
     * @param param
     * @return
     */
    List<BaseinfoCompanyPartner> selectListByPartnerLevelId(BaseinfoCompanyPartner param);

    /**
     * 根据会员等级id查询伙伴数量
     * @param param
     * @return
     */
    Integer selectCountByPartnerLevelId(BaseinfoCompanyPartner param);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table baseinfo_company_partner_0
     *
     * @mbg.generated Sat Mar 31 13:47:34 CST 2018
     */
    int deleteByPrimaryKey(Long partnerId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table baseinfo_company_partner_0
     *
     * @mbg.generated Sat Mar 31 13:47:34 CST 2018
     */
    Integer insertSelective(BaseinfoCompanyPartner record);



    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table baseinfo_company_partner_0
     *
     * @mbg.generated Sat Mar 31 13:47:34 CST 2018
     */
    BaseinfoCompanyPartner selectByPrimaryKey(Long partnerId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table baseinfo_company_partner_0
     *
     * @mbg.generated Sat Mar 31 13:47:34 CST 2018
     */
    int updateByPrimaryKeySelective(BaseinfoCompanyPartner record);

    /**
     * 查询供应商
     * @param queryReqDTO
     * @return
     */
    BaseinfoCompanyPartner getProviderInfoInsideQuery(ProviderInfoInsideQueryReqDTO queryReqDTO);
    
     /**
       * @Description: 根据id强制更新字段(包括is_can_edit)
       * @Param:
       * @return:
       * @Author: zhangtengpo 
       * @Date: 2018/5/30
       */
    int forceUpdateByPrimaryKeySelective(BaseinfoCompanyPartner record);

    /**
     * 判断公司会员手机号是否重复
     * @param queryPartnerBO
     * @return
     */
    List<BaseinfoCompanyPartner> checkMobileIsOrNotRepeat(QueryPartnerBO queryPartnerBO);
}