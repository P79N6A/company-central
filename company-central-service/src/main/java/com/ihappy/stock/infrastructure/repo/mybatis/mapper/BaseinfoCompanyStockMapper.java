package com.ihappy.stock.infrastructure.repo.mybatis.mapper;

import com.ihappy.stock.domain.bo.stock.DeleteStoreById;
import com.ihappy.stock.domain.dbdo.BaseinfoCompanyStock;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import java.util.Map;

public interface BaseinfoCompanyStockMapper {
    /**
     * compId 公司id
     * isPublic 是否公共仓库  1：公共仓库  0：非公共仓库  null:全部
     * forbidden 禁用 1 禁用 0未禁用  null:全部
     * storeIds 门店id列表
     * stockIds 仓库id列表
     * @param map
     * @return
     */
    List<BaseinfoCompanyStock> selectStockListByConditon(Map<String,Object> map);

    List<BaseinfoCompanyStock> findStockListByConditonWithStoreInfo(Map<String,Object> map);

    /**
     * 根据门店id列表 公司id 查询仓库列表
     * @param map
     * @return
     */
    List<BaseinfoCompanyStock> selectStockListByStoreIdList(Map<String,Object> map);

    /**
     * 根据条件查询列表
     * @param record
     * @return
     */
    List<BaseinfoCompanyStock> selectByConditionSelective(BaseinfoCompanyStock record);

    Integer updateStockInventorying(Map<String,Object> paramMap);

    Integer clearStockInventorying(Map<String,Object> paramMap);

    List<BaseinfoCompanyStock> selectStockListByIds(Map<String,Object> paramMap);

    List<BaseinfoCompanyStock> selectNotPublicStockListByCompIdAndStoreIds(@Param("compId") Integer compId,@Param("storeIds") List<Long> storeIds,@Param("stockName") String stockName,@Param("forbidden") Integer forbidden);

    List<BaseinfoCompanyStock> selectNotPublicStockListByCompId(@Param("compId") Integer compId,@Param("stockName") String stockName,@Param("forbidden") Integer forbidden);

    List<BaseinfoCompanyStock> selectPublicStockListByCompId(@Param("compId") Integer compId,@Param("stockName") String stockName,@Param("forbidden") Integer forbidden);

    BaseinfoCompanyStock selectByPrimaryKeyAndCompId(BaseinfoCompanyStock baseinfoCompanyStock);
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table baseinfo_company_stock
     *
     * @mbg.generated Fri Apr 13 09:19:04 CST 2018
     */
    int deleteByPrimaryKey(Long stockId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table baseinfo_company_stock
     *
     * @mbg.generated Fri Apr 13 09:19:04 CST 2018
     */
    int insert(BaseinfoCompanyStock record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table baseinfo_company_stock
     *
     * @mbg.generated Fri Apr 13 09:19:04 CST 2018
     */
    int insertSelective(BaseinfoCompanyStock record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table baseinfo_company_stock
     *
     * @mbg.generated Fri Apr 13 09:19:04 CST 2018
     */
    BaseinfoCompanyStock selectByPrimaryKey(Long stockId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table baseinfo_company_stock
     *
     * @mbg.generated Fri Apr 13 09:19:04 CST 2018
     */
    int updateByPrimaryKeySelective(BaseinfoCompanyStock record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table baseinfo_company_stock
     *
     * @mbg.generated Fri Apr 13 09:19:04 CST 2018
     */
    int updateByPrimaryKeyWithBLOBs(BaseinfoCompanyStock record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table baseinfo_company_stock
     *
     * @mbg.generated Fri Apr 13 09:19:04 CST 2018
     */
    int updateByPrimaryKey(BaseinfoCompanyStock record);

    /**
     * 删除仓库
     * @param deleteStoreById
     * @return
     */
    int deleteStockByStoreId(DeleteStoreById deleteStoreById);
}